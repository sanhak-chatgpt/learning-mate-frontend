/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PageableObject } from './PageableObject';
import {
  PageableObjectFromJSON,
  PageableObjectFromJSONTyped,
  PageableObjectToJSON,
} from './PageableObject';
import type { SortObject } from './SortObject';
import { SortObjectFromJSON, SortObjectFromJSONTyped, SortObjectToJSON } from './SortObject';
import type { SubjectDtoResponse } from './SubjectDtoResponse';
import {
  SubjectDtoResponseFromJSON,
  SubjectDtoResponseFromJSONTyped,
  SubjectDtoResponseToJSON,
} from './SubjectDtoResponse';

/**
 *
 * @export
 * @interface PageSubjectDtoResponse
 */
export interface PageSubjectDtoResponse {
  /**
   *
   * @type {number}
   * @memberof PageSubjectDtoResponse
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageSubjectDtoResponse
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PageSubjectDtoResponse
   */
  size?: number;
  /**
   *
   * @type {Array<SubjectDtoResponse>}
   * @memberof PageSubjectDtoResponse
   */
  content?: Array<SubjectDtoResponse>;
  /**
   *
   * @type {number}
   * @memberof PageSubjectDtoResponse
   */
  number?: number;
  /**
   *
   * @type {SortObject}
   * @memberof PageSubjectDtoResponse
   */
  sort?: SortObject;
  /**
   *
   * @type {number}
   * @memberof PageSubjectDtoResponse
   */
  numberOfElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageSubjectDtoResponse
   */
  pageable?: PageableObject;
  /**
   *
   * @type {boolean}
   * @memberof PageSubjectDtoResponse
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageSubjectDtoResponse
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageSubjectDtoResponse
   */
  empty?: boolean;
}

/**
 * Check if a given object implements the PageSubjectDtoResponse interface.
 */
export function instanceOfPageSubjectDtoResponse(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function PageSubjectDtoResponseFromJSON(json: any): PageSubjectDtoResponse {
  return PageSubjectDtoResponseFromJSONTyped(json, false);
}

export function PageSubjectDtoResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PageSubjectDtoResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    totalPages: !exists(json, 'totalPages') ? undefined : json['totalPages'],
    totalElements: !exists(json, 'totalElements') ? undefined : json['totalElements'],
    size: !exists(json, 'size') ? undefined : json['size'],
    content: !exists(json, 'content')
      ? undefined
      : (json['content'] as Array<any>).map(SubjectDtoResponseFromJSON),
    number: !exists(json, 'number') ? undefined : json['number'],
    sort: !exists(json, 'sort') ? undefined : SortObjectFromJSON(json['sort']),
    numberOfElements: !exists(json, 'numberOfElements') ? undefined : json['numberOfElements'],
    pageable: !exists(json, 'pageable') ? undefined : PageableObjectFromJSON(json['pageable']),
    first: !exists(json, 'first') ? undefined : json['first'],
    last: !exists(json, 'last') ? undefined : json['last'],
    empty: !exists(json, 'empty') ? undefined : json['empty'],
  };
}

export function PageSubjectDtoResponseToJSON(value?: PageSubjectDtoResponse | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    totalPages: value.totalPages,
    totalElements: value.totalElements,
    size: value.size,
    content:
      value.content === undefined
        ? undefined
        : (value.content as Array<any>).map(SubjectDtoResponseToJSON),
    number: value.number,
    sort: SortObjectToJSON(value.sort),
    numberOfElements: value.numberOfElements,
    pageable: PageableObjectToJSON(value.pageable),
    first: value.first,
    last: value.last,
    empty: value.empty,
  };
}
