/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LectureDtoResponse,
  UserDtoMe,
  UserDtoNickName,
} from '../models';
import {
    LectureDtoResponseFromJSON,
    LectureDtoResponseToJSON,
    UserDtoMeFromJSON,
    UserDtoMeToJSON,
    UserDtoNickNameFromJSON,
    UserDtoNickNameToJSON,
} from '../models';

export interface UpdateUserNicknameRequest {
    userDtoNickName: UserDtoNickName;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     * 자신의 lecture 전부 조회 api
     */
    async getLecturesByUserIdRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LectureDtoResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-key", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/lectures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LectureDtoResponseFromJSON));
    }

    /**
     * 자신의 lecture 전부 조회 api
     */
    async getLecturesByUserId(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LectureDtoResponse>> {
        const response = await this.getLecturesByUserIdRaw(initOverrides);
        return await response.value();
    }

    /**
     * User 정보 조회 api
     */
    async getuserNameRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDtoNickName>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-key", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/name`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoNickNameFromJSON(jsonValue));
    }

    /**
     * User 정보 조회 api
     */
    async getuserName(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDtoNickName> {
        const response = await this.getuserNameRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async issueTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDtoMe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/token/issue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoMeFromJSON(jsonValue));
    }

    /**
     */
    async issueToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDtoMe> {
        const response = await this.issueTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * nickName 변경 api
     */
    async updateUserNicknameRaw(requestParameters: UpdateUserNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDtoNickName>> {
        if (requestParameters.userDtoNickName === null || requestParameters.userDtoNickName === undefined) {
            throw new runtime.RequiredError('userDtoNickName','Required parameter requestParameters.userDtoNickName was null or undefined when calling updateUserNickname.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer-key", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/users/name`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserDtoNickNameToJSON(requestParameters.userDtoNickName),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoNickNameFromJSON(jsonValue));
    }

    /**
     * nickName 변경 api
     */
    async updateUserNickname(requestParameters: UpdateUserNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDtoNickName> {
        const response = await this.updateUserNicknameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
